// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Context.Old_Models;

public partial class NewCapmasWebsiteContext : DbContext
{
    public NewCapmasWebsiteContext()
    {
    }

    public NewCapmasWebsiteContext(DbContextOptions<NewCapmasWebsiteContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Catogry> Catogries { get; set; }

    public virtual DbSet<CatogryAll> CatogryAlls { get; set; }

    public virtual DbSet<CatogrySub> CatogrySubs { get; set; }

    public virtual DbSet<Channel> Channels { get; set; }

    public virtual DbSet<CommandLog> CommandLogs { get; set; }

    public virtual DbSet<Feed> Feeds { get; set; }

    public virtual DbSet<GisBoundDataDesc> GisBoundDataDescs { get; set; }

    public virtual DbSet<GisBuild1> GisBuild1s { get; set; }

    public virtual DbSet<GisBuildNew> GisBuildNews { get; set; }

    public virtual DbSet<GisBuildNewOld> GisBuildNewOlds { get; set; }

    public virtual DbSet<GisBuildNewOld252> GisBuildNewOld252s { get; set; }

    public virtual DbSet<GisBuildOld> GisBuildOlds { get; set; }

    public virtual DbSet<GisBuildOld1> GisBuildOlds1 { get; set; }

    public virtual DbSet<GisDataSection> GisDataSections { get; set; }

    public virtual DbSet<GisGovData204> GisGovData204s { get; set; }

    public virtual DbSet<GisGovDatum> GisGovData { get; set; }

    public virtual DbSet<GisGovDatum1> GisGovData1 { get; set; }

    public virtual DbSet<GisGovDatum2> GisGovData2 { get; set; }

    public virtual DbSet<GisGovDatum3> GisGovData3 { get; set; }

    public virtual DbSet<GisGovernorate> GisGovernorates { get; set; }

    public virtual DbSet<GisGovernorates2006> GisGovernorates2006s { get; set; }

    public virtual DbSet<GisGovernoratesN2006> GisGovernoratesN2006s { get; set; }

    public virtual DbSet<GisIndicatorsDesc> GisIndicatorsDescs { get; set; }

    public virtual DbSet<GisKismData204> GisKismData204s { get; set; }

    public virtual DbSet<GisKismDatum> GisKismData { get; set; }

    public virtual DbSet<GisKismDatum1> GisKismData1 { get; set; }

    public virtual DbSet<GisKismDatum2> GisKismData2 { get; set; }

    public virtual DbSet<GisKismDatum3> GisKismData3 { get; set; }

    public virtual DbSet<GisPovertyAllGov> GisPovertyAllGovs { get; set; }

    public virtual DbSet<GisPovertyAllSec> GisPovertyAllSecs { get; set; }

    public virtual DbSet<GisPovertyAllSubsec> GisPovertyAllSubsecs { get; set; }

    public virtual DbSet<GisQIsmMarkaz2006> GisQIsmMarkaz2006s { get; set; }

    public virtual DbSet<GisQismMarkaz> GisQismMarkazs { get; set; }

    public virtual DbSet<GisQismMarkazN2006> GisQismMarkazN2006s { get; set; }

    public virtual DbSet<GisShyakhaData204> GisShyakhaData204s { get; set; }

    public virtual DbSet<GisShyakhaDataNew> GisShyakhaDataNews { get; set; }

    public virtual DbSet<GisShyakhaDatum> GisShyakhaData { get; set; }

    public virtual DbSet<GisShyakhaDatum1> GisShyakhaData1 { get; set; }

    public virtual DbSet<GisShyakhaDatum2> GisShyakhaData2 { get; set; }

    public virtual DbSet<GisShyakhaVillage> GisShyakhaVillages { get; set; }

    public virtual DbSet<GisShyakhaVillage2006> GisShyakhaVillage2006s { get; set; }

    public virtual DbSet<GisShyakhaVillageN2006> GisShyakhaVillageN2006s { get; set; }

    public virtual DbSet<GisWater> GisWaters { get; set; }

    public virtual DbSet<HistoryCategory> HistoryCategories { get; set; }

    public virtual DbSet<HistoryCategorySub> HistoryCategorySubs { get; set; }

    public virtual DbSet<HistoryDetail> HistoryDetails { get; set; }

    public virtual DbSet<HistoryDetailsNew> HistoryDetailsNews { get; set; }

    public virtual DbSet<IndNew> IndNews { get; set; }

    public virtual DbSet<IndicatorRandDdrow> IndicatorRandDdrows { get; set; }

    public virtual DbSet<IndicatorsUser> IndicatorsUsers { get; set; }

    public virtual DbSet<IndicatorsUsersPriviliage> IndicatorsUsersPriviliages { get; set; }

    public virtual DbSet<Lobna2> Lobna2s { get; set; }

    public virtual DbSet<NewPrice> NewPrices { get; set; }

    public virtual DbSet<QrcodeTable> QrcodeTables { get; set; }

    public virtual DbSet<QrcodeTable1> QrcodeTable1s { get; set; }

    public virtual DbSet<QueryOld> QueryOlds { get; set; }

    public virtual DbSet<QuestionLink> QuestionLinks { get; set; }

    public virtual DbSet<Research> Researches { get; set; }

    public virtual DbSet<RestrictedBullitin> RestrictedBullitins { get; set; }

    public virtual DbSet<Sheet1> Sheet1s { get; set; }

    public virtual DbSet<StaticValue> StaticValues { get; set; }

    public virtual DbSet<TblAdminMenu> TblAdminMenus { get; set; }

    public virtual DbSet<TblApplication> TblApplications { get; set; }

    public virtual DbSet<TblApplicationGroup> TblApplicationGroups { get; set; }

    public virtual DbSet<TblApplicationOld> TblApplicationOlds { get; set; }

    public virtual DbSet<TblApplicationSec> TblApplicationSecs { get; set; }

    public virtual DbSet<TblApplicationUser> TblApplicationUsers { get; set; }

    public virtual DbSet<TblAudio> TblAudios { get; set; }

    public virtual DbSet<TblCapmasCentralManagment> TblCapmasCentralManagments { get; set; }

    public virtual DbSet<TblCapmasmangement> TblCapmasmangements { get; set; }

    public virtual DbSet<TblCentre> TblCentres { get; set; }

    public virtual DbSet<TblClock> TblClocks { get; set; }

    public virtual DbSet<TblClock2> TblClock2s { get; set; }

    public virtual DbSet<TblCompany> TblCompanies { get; set; }

    public virtual DbSet<TblCountry> TblCountries { get; set; }

    public virtual DbSet<TblDisscutionTopic> TblDisscutionTopics { get; set; }

    public virtual DbSet<TblEducationCategory> TblEducationCategories { get; set; }

    public virtual DbSet<TblElectoronicSurvey> TblElectoronicSurveys { get; set; }

    public virtual DbSet<TblEmployee> TblEmployees { get; set; }

    public virtual DbSet<TblEmployeesGroup> TblEmployeesGroups { get; set; }

    public virtual DbSet<TblFaq> TblFaqs { get; set; }

    public virtual DbSet<TblForm> TblForms { get; set; }

    public virtual DbSet<TblFormCategory> TblFormCategories { get; set; }

    public virtual DbSet<TblFormGroup> TblFormGroups { get; set; }

    public virtual DbSet<TblFormStatisticalBulletin> TblFormStatisticalBulletins { get; set; }

    public virtual DbSet<TblFoundation> TblFoundations { get; set; }

    public virtual DbSet<TblGovernorate> TblGovernorates { get; set; }

    public virtual DbSet<TblImpPub> TblImpPubs { get; set; }

    public virtual DbSet<TblImpPubLink> TblImpPubLinks { get; set; }

    public virtual DbSet<TblImportantIndicator> TblImportantIndicators { get; set; }

    public virtual DbSet<TblIndicator> TblIndicators { get; set; }

    public virtual DbSet<TblIndicatorActivity> TblIndicatorActivities { get; set; }

    public virtual DbSet<TblIndicatorCountrySector> TblIndicatorCountrySectors { get; set; }

    public virtual DbSet<TblIndicatorDatum> TblIndicatorData { get; set; }

    public virtual DbSet<TblIndicatorGenSector> TblIndicatorGenSectors { get; set; }

    public virtual DbSet<TblIndicatorGender> TblIndicatorGenders { get; set; }

    public virtual DbSet<TblIndicatorGeoArea> TblIndicatorGeoAreas { get; set; }

    public virtual DbSet<TblIndicatorGovernorate> TblIndicatorGovernorates { get; set; }

    public virtual DbSet<TblIndicatorLegalEntity> TblIndicatorLegalEntities { get; set; }

    public virtual DbSet<TblIndicatorOtherDataCategory> TblIndicatorOtherDataCategories { get; set; }

    public virtual DbSet<TblIndicatorOtherDatum> TblIndicatorOtherData { get; set; }

    public virtual DbSet<TblIndicatorQuarter> TblIndicatorQuarters { get; set; }

    public virtual DbSet<TblIndicatorSide> TblIndicatorSides { get; set; }

    public virtual DbSet<TblIndicatorUrban> TblIndicatorUrbans { get; set; }

    public virtual DbSet<TblIndicatorsEnglish> TblIndicatorsEnglishes { get; set; }

    public virtual DbSet<TblIndicatorsEnglish2> TblIndicatorsEnglish2s { get; set; }

    public virtual DbSet<TblIndicatorsMainShow> TblIndicatorsMainShows { get; set; }

    public virtual DbSet<TblIndicatorsTranslate> TblIndicatorsTranslates { get; set; }

    public virtual DbSet<TblIndicatorsTranslate2> TblIndicatorsTranslate2s { get; set; }

    public virtual DbSet<TblInternationalIndicator> TblInternationalIndicators { get; set; }

    public virtual DbSet<TblInternationalIndicatorsDetail> TblInternationalIndicatorsDetails { get; set; }

    public virtual DbSet<TblMainMenu> TblMainMenus { get; set; }

    public virtual DbSet<TblMainPagesSector> TblMainPagesSectors { get; set; }

    public virtual DbSet<TblMainPublication> TblMainPublications { get; set; }

    public virtual DbSet<TblMainSubMenu> TblMainSubMenus { get; set; }

    public virtual DbSet<TblMainSubMenuGroup> TblMainSubMenuGroups { get; set; }

    public virtual DbSet<TblMessage> TblMessages { get; set; }

    public virtual DbSet<TblMonth> TblMonths { get; set; }

    public virtual DbSet<TblNews> TblNews { get; set; }

    public virtual DbSet<TblNewsFile> TblNewsFiles { get; set; }

    public virtual DbSet<TblNewsGroup> TblNewsGroups { get; set; }

    public virtual DbSet<TblNewsType> TblNewsTypes { get; set; }

    public virtual DbSet<TblNewsTypesMainSubMenu> TblNewsTypesMainSubMenus { get; set; }

    public virtual DbSet<TblOrderFormSide> TblOrderFormSides { get; set; }

    public virtual DbSet<TblOrderFormStatstican> TblOrderFormStatsticans { get; set; }

    public virtual DbSet<TblPage> TblPages { get; set; }

    public virtual DbSet<TblPagesSector> TblPagesSectors { get; set; }

    public virtual DbSet<TblPaper> TblPapers { get; set; }

    public virtual DbSet<TblPaperCategory> TblPaperCategories { get; set; }

    public virtual DbSet<TblPeriod> TblPeriods { get; set; }

    public virtual DbSet<TblPermission> TblPermissions { get; set; }

    public virtual DbSet<TblPopulationClock> TblPopulationClocks { get; set; }

    public virtual DbSet<TblPosition> TblPositions { get; set; }

    public virtual DbSet<TblPublicationType> TblPublicationTypes { get; set; }

    public virtual DbSet<TblPublish> TblPublishes { get; set; }

    public virtual DbSet<TblQualification> TblQualifications { get; set; }

    public virtual DbSet<TblQuarter> TblQuarters { get; set; }

    public virtual DbSet<TblQuestion> TblQuestions { get; set; }

    public virtual DbSet<TblQuestionCluster> TblQuestionClusters { get; set; }

    public virtual DbSet<TblQuestionEvaluation> TblQuestionEvaluations { get; set; }

    public virtual DbSet<TblQuestionStatus> TblQuestionStatuses { get; set; }

    public virtual DbSet<TblQuestsionerAnswer> TblQuestsionerAnswers { get; set; }

    public virtual DbSet<TblQuestsionerDatum> TblQuestsionerData { get; set; }

    public virtual DbSet<TblQuestsionerTitle> TblQuestsionerTitles { get; set; }

    public virtual DbSet<TblRequest> TblRequests { get; set; }

    public virtual DbSet<TblRequestCategory> TblRequestCategories { get; set; }

    public virtual DbSet<TblRequestFormSide> TblRequestFormSides { get; set; }

    public virtual DbSet<TblRequestFormStatistican> TblRequestFormStatisticans { get; set; }

    public virtual DbSet<TblRequestRegisteration> TblRequestRegisterations { get; set; }

    public virtual DbSet<TblRequestStatus> TblRequestStatuses { get; set; }

    public virtual DbSet<TblReseachAndFormsCategory> TblReseachAndFormsCategories { get; set; }

    public virtual DbSet<TblResearchLink> TblResearchLinks { get; set; }

    public virtual DbSet<TblResearchesAgreement> TblResearchesAgreements { get; set; }

    public virtual DbSet<TblResearchsAndForm> TblResearchsAndForms { get; set; }

    public virtual DbSet<TblReserchesAndFormsYear> TblReserchesAndFormsYears { get; set; }

    public virtual DbSet<TblSemanticGroup> TblSemanticGroups { get; set; }

    public virtual DbSet<TblSemanticIssue> TblSemanticIssues { get; set; }

    public virtual DbSet<TblSite> TblSites { get; set; }

    public virtual DbSet<TblSiteCategory> TblSiteCategories { get; set; }

    public virtual DbSet<TblSmartTvimage> TblSmartTvimages { get; set; }

    public virtual DbSet<TblSmartTvindicator> TblSmartTvindicators { get; set; }

    public virtual DbSet<TblStatistcalBulltinsYear> TblStatistcalBulltinsYears { get; set; }

    public virtual DbSet<TblStatisticsBulltin> TblStatisticsBulltins { get; set; }

    public virtual DbSet<TblStatisticsBulltinsSector> TblStatisticsBulltinsSectors { get; set; }

    public virtual DbSet<TblStatisticsBulltinsSectoreDatum> TblStatisticsBulltinsSectoreData { get; set; }

    public virtual DbSet<TblStatisticsCategory> TblStatisticsCategories { get; set; }

    public virtual DbSet<TblStatisticsDepartement> TblStatisticsDepartements { get; set; }

    public virtual DbSet<TblUseMessage> TblUseMessages { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    public virtual DbSet<TblUserFav> TblUserFavs { get; set; }

    public virtual DbSet<TblUserGroup> TblUserGroups { get; set; }

    public virtual DbSet<TblUserType> TblUserTypes { get; set; }

    public virtual DbSet<TblUsersAnswer> TblUsersAnswers { get; set; }

    public virtual DbSet<TblUsersGroupsBulltin> TblUsersGroupsBulltins { get; set; }

    public virtual DbSet<TblVisitHistory> TblVisitHistories { get; set; }

    public virtual DbSet<TblVisitsLog> TblVisitsLogs { get; set; }

    public virtual DbSet<TblYear> TblYears { get; set; }

    public virtual DbSet<TblYearsNew> TblYearsNews { get; set; }

    public virtual DbSet<TradeEximFay> TradeEximFays { get; set; }

    public virtual DbSet<TradeForBalance> TradeForBalances { get; set; }

    public virtual DbSet<TradeForBalancenew> TradeForBalancenews { get; set; }

    public virtual DbSet<TradeForChapter> TradeForChapters { get; set; }

    public virtual DbSet<TradeForChaptersnew> TradeForChaptersnews { get; set; }

    public virtual DbSet<TradeForCountry> TradeForCountries { get; set; }

    public virtual DbSet<TradeForCountrynew> TradeForCountrynews { get; set; }

    public virtual DbSet<TradeForExpRowdatanew> TradeForExpRowdatanews { get; set; }

    public virtual DbSet<TradeForExpRowdatum> TradeForExpRowdata { get; set; }

    public virtual DbSet<TradeForFdoller> TradeForFdollers { get; set; }

    public virtual DbSet<TradeForFdollernew> TradeForFdollernews { get; set; }

    public virtual DbSet<TradeForHsn> TradeForHsns { get; set; }

    public virtual DbSet<TradeForHsnnew> TradeForHsnnews { get; set; }

    public virtual DbSet<TradeForImpRowdatanew> TradeForImpRowdatanews { get; set; }

    public virtual DbSet<TradeForImpRowdatum> TradeForImpRowdata { get; set; }

    public virtual DbSet<TradeForManufacture> TradeForManufactures { get; set; }

    public virtual DbSet<TradeForManufacturenew> TradeForManufacturenews { get; set; }

    public virtual DbSet<TradeForPort> TradeForPorts { get; set; }

    public virtual DbSet<TradeForPortsnew> TradeForPortsnews { get; set; }

    public virtual DbSet<TradeForSubChapter> TradeForSubChapters { get; set; }

    public virtual DbSet<TradeForSubChaptersnew> TradeForSubChaptersnews { get; set; }

    public virtual DbSet<TradeForUnit> TradeForUnits { get; set; }

    public virtual DbSet<TradeForUnitsnew> TradeForUnitsnews { get; set; }

    public virtual DbSet<TradeNameimex2008> TradeNameimex2008s { get; set; }

    public virtual DbSet<TranslateTblIndicatorActivity> TranslateTblIndicatorActivities { get; set; }

    public virtual DbSet<TranslateTblIndicatorCountrySector> TranslateTblIndicatorCountrySectors { get; set; }

    public virtual DbSet<TranslateTblIndicatorDatum> TranslateTblIndicatorData { get; set; }

    public virtual DbSet<TranslateTblIndicatorGenSector> TranslateTblIndicatorGenSectors { get; set; }

    public virtual DbSet<TranslateTblIndicatorGender> TranslateTblIndicatorGenders { get; set; }

    public virtual DbSet<TranslateTblIndicatorGeoArea> TranslateTblIndicatorGeoAreas { get; set; }

    public virtual DbSet<TranslateTblIndicatorGovernorate> TranslateTblIndicatorGovernorates { get; set; }

    public virtual DbSet<TranslateTblIndicatorLegalEntity> TranslateTblIndicatorLegalEntities { get; set; }

    public virtual DbSet<TranslateTblIndicatorOtherDataCategory> TranslateTblIndicatorOtherDataCategories { get; set; }

    public virtual DbSet<TranslateTblIndicatorOtherDatum> TranslateTblIndicatorOtherData { get; set; }

    public virtual DbSet<TranslateTblIndicatorQuarter> TranslateTblIndicatorQuarters { get; set; }

    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Arabic_CI_AS");

        modelBuilder.Entity<Channel>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<CommandLog>(entity =>
        {
            entity.Property(e => e.ObjectType).IsFixedLength();
        });

        modelBuilder.Entity<Feed>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Channel).WithMany(p => p.Feeds)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feeds_Channel");
        });

        modelBuilder.Entity<GisBuild1>(entity =>
        {
            entity.HasKey(e => e.BuildId).HasName("PK_GIS_Build");

            entity.Property(e => e.BuildId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GisBuildOld1>(entity =>
        {
            entity.HasKey(e => e.BuildId).HasName("PK_GIS_Build_1");

            entity.Property(e => e.BuildId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GisGovernorate>(entity =>
        {
            entity.Property(e => e.GovId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GisGovernorates2006>(entity =>
        {
            entity.HasKey(e => e.GovId).HasName("PK_GIS_GOVERNORATES_2006_1");
        });

        modelBuilder.Entity<GisGovernoratesN2006>(entity =>
        {
            entity.HasKey(e => e.GovId).HasName("PK_GIS_GOVERNORATES_New");
        });

        modelBuilder.Entity<GisKismDatum3>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_gis_kism_data_New");
        });

        modelBuilder.Entity<GisQIsmMarkaz2006>(entity =>
        {
            entity.HasOne(d => d.Gov).WithMany(p => p.GisQIsmMarkaz2006s).HasConstraintName("FK_GIS_qISM_MARKAZ_2006_GIS_GOVERNORATES_2006");
        });

        modelBuilder.Entity<GisQismMarkaz>(entity =>
        {
            entity.Property(e => e.SecId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GisQismMarkazN2006>(entity =>
        {
            entity.HasKey(e => e.SecId).HasName("PK_GIS_QISM_MARKAZ_New");

            entity.HasOne(d => d.Gov).WithMany(p => p.GisQismMarkazN2006s).HasConstraintName("FK_GIS_QISM_MARKAZ_N2006_GIS_GOVERNORATES_N2006");
        });

        modelBuilder.Entity<GisShyakhaVillage>(entity =>
        {
            entity.Property(e => e.SsecId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GisShyakhaVillage2006>(entity =>
        {
            entity.HasKey(e => e.SsecId).HasName("PK_SHYAKHA_VILLAGE_2006");

            entity.HasOne(d => d.Sec).WithMany(p => p.GisShyakhaVillage2006s).HasConstraintName("FK_GIS_SHYAKHA_VILLAGE_2006_GIS_qISM_MARKAZ_2006");
        });

        modelBuilder.Entity<GisShyakhaVillageN2006>(entity =>
        {
            entity.HasKey(e => e.SsecId).HasName("PK_GIS_SHYAKHA_VILLAGE_New");

            entity.HasOne(d => d.Sec).WithMany(p => p.GisShyakhaVillageN2006s).HasConstraintName("FK_GIS_SHYAKHA_VILLAGE_N2006_GIS_QISM_MARKAZ_N2006");
        });

        modelBuilder.Entity<HistoryCategory>(entity =>
        {
            entity.HasOne(d => d.Msm).WithMany(p => p.HistoryCategories).HasConstraintName("FK_History_Categories_tblMainSubMenu");
        });

        modelBuilder.Entity<HistoryCategorySub>(entity =>
        {
            entity.HasOne(d => d.Hc).WithMany(p => p.HistoryCategorySubs).HasConstraintName("FK_History_CategorySub_History_Categories");

            entity.HasOne(d => d.Sd).WithMany(p => p.HistoryCategorySubs).HasConstraintName("FK_History_CategorySub_tblStatisticsDepartements");
        });

        modelBuilder.Entity<HistoryDetail>(entity =>
        {
            entity.Property(e => e.StatusOrder).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.HistoryDetailEmpCreateNavigations).HasConstraintName("FK_History_Details_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.HistoryDetailEmpLastUpdateNavigations).HasConstraintName("FK_History_Details_tblEmployees1");

            entity.HasOne(d => d.Gov).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_tblGovernorates");

            entity.HasOne(d => d.Hcs).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_History_CategorySub");

            entity.HasOne(d => d.Month).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_tblMonths");

            entity.HasOne(d => d.Per).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_tblperiods");

            entity.HasOne(d => d.Qua).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_tblQuarters");

            entity.HasOne(d => d.Year).WithMany(p => p.HistoryDetails).HasConstraintName("FK_History_Details_tblYears");
        });

        modelBuilder.Entity<IndNew>(entity =>
        {
            entity.Property(e => e.IndDataChartType).IsFixedLength();
            entity.Property(e => e.IndDataId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<IndicatorsUsersPriviliage>(entity =>
        {
            entity.HasOne(d => d.Ind).WithMany(p => p.IndicatorsUsersPriviliages).HasConstraintName("FK_IndicatorsUsers_Priviliages_tblIndicators");

            entity.HasOne(d => d.User).WithMany(p => p.IndicatorsUsersPriviliages).HasConstraintName("FK_IndicatorsUsers_Priviliages_IndicatorsUsers");
        });

        modelBuilder.Entity<Lobna2>(entity =>
        {
            entity.Property(e => e.F1).IsFixedLength();
            entity.Property(e => e.F2).IsFixedLength();
            entity.Property(e => e.F3).IsFixedLength();
            entity.Property(e => e.F4).IsFixedLength();
            entity.Property(e => e.F5).IsFixedLength();
            entity.Property(e => e.F6).IsFixedLength();
        });

        modelBuilder.Entity<QrcodeTable1>(entity =>
        {
            entity.Property(e => e.QrId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<QueryOld>(entity =>
        {
            entity.Property(e => e.IndDataChartType).IsFixedLength();
        });

        modelBuilder.Entity<QuestionLink>(entity =>
        {
            entity.HasOne(d => d.Que).WithMany(p => p.QuestionLinks).HasConstraintName("FK_Question_Link_tblQuestions");
        });

        modelBuilder.Entity<RestrictedBullitin>(entity =>
        {
            entity.Property(e => e.SbId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TblAdminMenu>(entity =>
        {
            entity.Property(e => e.AmCheckBox).HasDefaultValueSql("((0))");
            entity.Property(e => e.AmSubPage).HasDefaultValueSql("((0))");
            entity.Property(e => e.AmVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.AmParentNavigation).WithMany(p => p.InverseAmParentNavigation).HasConstraintName("FK_tblAdminMenu_tblAdminMenu");
        });

        modelBuilder.Entity<TblApplication>(entity =>
        {
            entity.Property(e => e.AppPrevWork).IsFixedLength();
            entity.Property(e => e.AppQualYear).IsFixedLength();
            entity.Property(e => e.AppSideYear).IsFixedLength();

            entity.HasOne(d => d.AppUsr).WithMany().HasConstraintName("FK_tblApplication_tblApplication_Users1");

            entity.HasOne(d => d.Centre).WithMany().HasConstraintName("FK_tblApplication_GIS_QISM_MARKAZ_N2006");

            entity.HasOne(d => d.Gov).WithMany().HasConstraintName("FK_tblApplication_GIS_GOVERNORATES_2006");

            entity.HasOne(d => d.Quali).WithMany().HasConstraintName("FK_tblApplication_tblQualifications1");

            entity.HasOne(d => d.Ssec).WithMany().HasConstraintName("FK_tblApplication_GIS_SHYAKHA_VILLAGE_N2006");
        });

        modelBuilder.Entity<TblApplicationOld>(entity =>
        {
            entity.HasKey(e => e.AppId).HasName("PK_tblApplication");

            entity.Property(e => e.AppDoWorkGoverSide).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppHasIcdl).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppHasOtherCert).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppHasWorkNature).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppPrevWork).IsFixedLength();
            entity.Property(e => e.AppQualYear).IsFixedLength();
            entity.Property(e => e.AppSideYear).IsFixedLength();
            entity.Property(e => e.AppValidInput).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.AppUsr).WithMany(p => p.TblApplicationOlds).HasConstraintName("FK_tblApplication_tblApplication_Users");

            entity.HasOne(d => d.Centre).WithMany(p => p.TblApplicationOlds).HasConstraintName("FK_tblApplication_tblCentres");

            entity.HasOne(d => d.Gov).WithMany(p => p.TblApplicationOlds).HasConstraintName("FK_tblApplication_tblGovernorates");

            entity.HasOne(d => d.Quali).WithMany(p => p.TblApplicationOlds).HasConstraintName("FK_tblApplication_tblQualifications");

            entity.HasOne(d => d.Ssec).WithMany(p => p.TblApplicationOlds).HasConstraintName("FK_tblApplication_GIS_SHYAKHA_VILLAGE_2006");
        });

        modelBuilder.Entity<TblApplicationSec>(entity =>
        {
            entity.Property(e => e.AppPrevWork).IsFixedLength();
            entity.Property(e => e.AppQualYear).IsFixedLength();
            entity.Property(e => e.AppSideYear).IsFixedLength();
        });

        modelBuilder.Entity<TblApplicationUser>(entity =>
        {
            entity.HasOne(d => d.Gov).WithMany(p => p.TblApplicationUsers).HasConstraintName("FK_tblApplication_Users_tblGovernorates");
        });

        modelBuilder.Entity<TblAudio>(entity =>
        {
            entity.HasOne(d => d.Si).WithMany(p => p.TblAudios).HasConstraintName("FK_tblAudio_tblSemantic_Issues");
        });

        modelBuilder.Entity<TblCapmasmangement>(entity =>
        {
            entity.HasOne(d => d.Ccm).WithMany(p => p.TblCapmasmangements).HasConstraintName("FK_tblCAPMASMangements_tblCapmasCentralManagments");
        });

        modelBuilder.Entity<TblCentre>(entity =>
        {
            entity.HasOne(d => d.Gov).WithMany(p => p.TblCentres).HasConstraintName("FK_tblCentres_tblGovernorates");
        });

        modelBuilder.Entity<TblCompany>(entity =>
        {
            entity.Property(e => e.ComActivate).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TblCountry>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PK_Countries");
        });

        modelBuilder.Entity<TblDisscutionTopic>(entity =>
        {
            entity.HasKey(e => e.DtId).HasName("PK_bltDisscutionTopic");

            entity.Property(e => e.DtIsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.ShowInMain).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Emp).WithMany(p => p.TblDisscutionTopics).HasConstraintName("FK_bltDisscutionTopic_tblEmployees");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblDisscutionTopics)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_bltDisscutionTopic_tblUsers");
        });

        modelBuilder.Entity<TblEducationCategory>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblEducationCategoryEmpCreateNavigations).HasConstraintName("FK_tblEducationCategory_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblEducationCategoryEmpLastUpdateNavigations).HasConstraintName("FK_tblEducationCategory_tblEmployees1");
        });

        modelBuilder.Entity<TblEmployee>(entity =>
        {
            entity.HasOne(d => d.EmpGr).WithMany(p => p.TblEmployees).HasConstraintName("FK_tblEmployees_EmployeesGroup");

            entity.HasOne(d => d.Pos).WithMany(p => p.TblEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblEmployees_tblPosition");
        });

        modelBuilder.Entity<TblEmployeesGroup>(entity =>
        {
            entity.HasKey(e => e.EmpGrId).HasName("PK_EmployeesGroup");
        });

        modelBuilder.Entity<TblFaq>(entity =>
        {
            entity.HasOne(d => d.Sd).WithMany(p => p.TblFaqs).HasConstraintName("FK_tblFAQ_StatisticsDepartements");
        });

        modelBuilder.Entity<TblForm>(entity =>
        {
            entity.HasOne(d => d.Fg).WithMany(p => p.TblForms).HasConstraintName("FK_tblForms_tblFormGroups");
        });

        modelBuilder.Entity<TblFormCategory>(entity =>
        {
            entity.HasOne(d => d.Msm).WithMany(p => p.TblFormCategories).HasConstraintName("FK_tblFormCategories_tblMainSubMenu");
        });

        modelBuilder.Entity<TblFormGroup>(entity =>
        {
            entity.HasOne(d => d.Fc).WithMany(p => p.TblFormGroups).HasConstraintName("FK_tblFormGroups_tblFormCategories");
        });

        modelBuilder.Entity<TblFormStatisticalBulletin>(entity =>
        {
            entity.HasOne(d => d.Fc).WithMany(p => p.TblFormStatisticalBulletins).HasConstraintName("FK_tblForm_StatisticalBulletin_tblFormCategories");

            entity.HasOne(d => d.Sb).WithMany(p => p.TblFormStatisticalBulletins).HasConstraintName("FK_tblForm_StatisticalBulletin_tblStatisticsBulltins");
        });

        modelBuilder.Entity<TblGovernorate>(entity =>
        {
            entity.Property(e => e.GovId).ValueGeneratedNever();
            entity.Property(e => e.GovCode).IsFixedLength();
        });

        modelBuilder.Entity<TblImpPubLink>(entity =>
        {
            entity.HasOne(d => d.ImpPub).WithMany(p => p.TblImpPubLinks).HasConstraintName("FK_tblImpPubLink_tblImpPub");
        });

        modelBuilder.Entity<TblImportantIndicator>(entity =>
        {
            entity.HasOne(d => d.IndData).WithMany(p => p.TblImportantIndicators).HasConstraintName("FK_tblImportantIndicators_tblIndicatorData");

            entity.HasOne(d => d.Ind).WithMany(p => p.TblImportantIndicators).HasConstraintName("FK_tblImportantIndicators_tblIndicators");
        });

        modelBuilder.Entity<TblIndicatorDatum>(entity =>
        {
            entity.Property(e => e.IndDataChartType).IsFixedLength();

            entity.HasOne(d => d.Year).WithMany(p => p.TblIndicatorData).HasConstraintName("FK_tblIndicatorData_tblYears");
        });

        modelBuilder.Entity<TblIndicatorsEnglish>(entity =>
        {
            entity.Property(e => e.IndId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TblInternationalIndicator>(entity =>
        {
            entity.Property(e => e.IntIndVisable).HasDefaultValueSql("((1))");
            entity.Property(e => e.InternalShow).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TblInternationalIndicatorsDetail>(entity =>
        {
            entity.Property(e => e.IntIndDPublishedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IntIndDVisable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IntIndDVisibleInMain).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.IntInd).WithMany(p => p.TblInternationalIndicatorsDetails).HasConstraintName("FK_tblInternationalIndicators_Details_tblInternationalIndicators");

            entity.HasOne(d => d.Year).WithMany(p => p.TblInternationalIndicatorsDetails).HasConstraintName("FK_tblInternationalIndicators_Details_tblYears");
        });

        modelBuilder.Entity<TblMainMenu>(entity =>
        {
            entity.HasKey(e => e.MmId).HasName("PK_MainMenu");

            entity.Property(e => e.MmVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblMainMenuEmpCreateNavigations).HasConstraintName("FK_tblMainMenu_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblMainMenuEmpLastUpdateNavigations).HasConstraintName("FK_tblMainMenu_tblEmployees1");
        });

        modelBuilder.Entity<TblMainPagesSector>(entity =>
        {
            entity.HasKey(e => e.MpsId).HasName("PK_MainPagesSectors");

            entity.Property(e => e.MpsVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblMainPagesSectorEmpCreateNavigations).HasConstraintName("FK_tblMainPagesSectors_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblMainPagesSectorEmpLastUpdateNavigations).HasConstraintName("FK_tblMainPagesSectors_tblEmployees1");

            entity.HasOne(d => d.Ps).WithMany(p => p.TblMainPagesSectors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblMainPagesSectors_tblPagesSectors");

            entity.HasOne(d => d.Sb).WithMany(p => p.TblMainPagesSectors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblMainPagesSectors_tblStatisticsBulltins");
        });

        modelBuilder.Entity<TblMainPublication>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblMainPublicationEmpCreateNavigations).HasConstraintName("FK_tblMainPublication_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblMainPublicationEmpLastUpdateNavigations).HasConstraintName("FK_tblMainPublication_tblEmployees1");
        });

        modelBuilder.Entity<TblMainSubMenu>(entity =>
        {
            entity.HasKey(e => e.MsmId).HasName("PK_MainSubMenu");

            entity.Property(e => e.MsmVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblMainSubMenuEmpCreateNavigations).HasConstraintName("FK_tblMainSubMenu_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblMainSubMenuEmpLastUpdateNavigations).HasConstraintName("FK_tblMainSubMenu_tblEmployees1");

            entity.HasOne(d => d.Mm).WithMany(p => p.TblMainSubMenus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MainSubMenu_MainMenu");

            entity.HasOne(d => d.Msmgrp).WithMany(p => p.TblMainSubMenus).HasConstraintName("FK_tblMainSubMenu_tblMainSubMenu_Group");
        });

        modelBuilder.Entity<TblMainSubMenuGroup>(entity =>
        {
            entity.HasOne(d => d.Mm).WithMany(p => p.TblMainSubMenuGroups).HasConstraintName("FK_tblMainSubMenu_Group_tblMainMenu");
        });

        modelBuilder.Entity<TblMonth>(entity =>
        {
            entity.HasKey(e => e.MonthId).HasName("PK_Months");
        });

        modelBuilder.Entity<TblNews>(entity =>
        {
            entity.HasKey(e => e.NewsId).HasName("PK_tblNews_1");

            entity.HasOne(d => d.Ntm).WithMany(p => p.TblNews).HasConstraintName("FK_tblNews_tblNewsTypes_MainSubMenu");
        });

        modelBuilder.Entity<TblNewsFile>(entity =>
        {
            entity.HasKey(e => e.NlId).HasName("PK_tblNewsLinks");

            entity.Property(e => e.NlPageLink).HasDefaultValueSql("((0))");
            entity.Property(e => e.NlVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblNewsFileEmpCreateNavigations).HasConstraintName("FK_tblNewsFiles_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblNewsFileEmpLastUpdateNavigations).HasConstraintName("FK_tblNewsFiles_tblEmployees1");

            entity.HasOne(d => d.News).WithMany(p => p.TblNewsFiles).HasConstraintName("FK_tblNewsLinks_tblNews");
        });

        modelBuilder.Entity<TblNewsGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK_tblFields");
        });

        modelBuilder.Entity<TblNewsType>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblNewsTypeEmpCreateNavigations).HasConstraintName("FK_tblNewsTypes_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblNewsTypeEmpLastUpdateNavigations).HasConstraintName("FK_tblNewsTypes_tblEmployees1");
        });

        modelBuilder.Entity<TblNewsTypesMainSubMenu>(entity =>
        {
            entity.Property(e => e.EmpCreate).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblNewsTypesMainSubMenuEmpCreateNavigations).HasConstraintName("FK_tblNewsTypes_MainSubMenu_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblNewsTypesMainSubMenuEmpLastUpdateNavigations).HasConstraintName("FK_tblNewsTypes_MainSubMenu_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblNewsTypesMainSubMenus).HasConstraintName("FK_tblNewsTypes_MainSubMenu_tblMainSubMenu");

            entity.HasOne(d => d.Type).WithMany(p => p.TblNewsTypesMainSubMenus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblNewsTypes_MainSubMenu_tblNewsTypes");
        });

        modelBuilder.Entity<TblOrderFormSide>(entity =>
        {
            entity.Property(e => e.RosCreatedDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<TblOrderFormStatstican>(entity =>
        {
            entity.Property(e => e.RostCreatedDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<TblPage>(entity =>
        {
            entity.HasKey(e => e.PagId).HasName("PK_tbl_Pages");

            entity.Property(e => e.PagInternalShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.PagVisible).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblPageEmpCreateNavigations).HasConstraintName("FK_tblPages_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblPageEmpLastUpdateNavigations).HasConstraintName("FK_tblPages_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblPages).HasConstraintName("FK_tblPages_tblMainSubMenu");
        });

        modelBuilder.Entity<TblPagesSector>(entity =>
        {
            entity.Property(e => e.PsVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblPagesSectorEmpCreateNavigations).HasConstraintName("FK_tblPagesSectors_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblPagesSectorEmpLastUpdateNavigations).HasConstraintName("FK_tblPagesSectors_tblEmployees1");
        });

        modelBuilder.Entity<TblPaper>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblPaperEmpCreateNavigations).HasConstraintName("FK_tblPapers_tblEmployees1");

            entity.HasOne(d => d.Emp).WithMany(p => p.TblPaperEmps).HasConstraintName("FK_tblPapers_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblPaperEmpLastUpdateNavigations).HasConstraintName("FK_tblPapers_tblEmployees2");

            entity.HasOne(d => d.Pc).WithMany(p => p.TblPapers).HasConstraintName("FK_tblPapers_tblPaperCategories");
        });

        modelBuilder.Entity<TblPaperCategory>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblPaperCategoryEmpCreateNavigations).HasConstraintName("FK_tblPaperCategories_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblPaperCategoryEmpLastUpdateNavigations).HasConstraintName("FK_tblPaperCategories_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblPaperCategories).HasConstraintName("FK_tblPaperCategories_MainSubMenu");
        });

        modelBuilder.Entity<TblPermission>(entity =>
        {
            entity.Property(e => e.PerCheckBox).HasDefaultValueSql("((0))");
            entity.Property(e => e.PerSubPage).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Am).WithMany(p => p.TblPermissions).HasConstraintName("FK_tblPermission_tblAdminMenu");

            entity.HasOne(d => d.EmpGr).WithMany(p => p.TblPermissions).HasConstraintName("FK_tblPermission_EmployeesGroup");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblPermissions).HasConstraintName("FK_tblPermission_tblMainSubMenu");
        });

        modelBuilder.Entity<TblPopulationClock>(entity =>
        {
            entity.HasOne(d => d.Gov).WithMany(p => p.TblPopulationClocks).HasConstraintName("FK_tblPopulationClock_tblGovernorates");
        });

        modelBuilder.Entity<TblPosition>(entity =>
        {
            entity.HasOne(d => d.Man).WithMany(p => p.TblPositions).HasConstraintName("FK_tblPosition_tblCAPMASMangements");
        });

        modelBuilder.Entity<TblQuarter>(entity =>
        {
            entity.Property(e => e.QuaId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblQuestion>(entity =>
        {
            entity.HasKey(e => e.QueId).HasName("PK_tblComplains");

            entity.Property(e => e.QueVisible).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Evaluation).WithMany(p => p.TblQuestions).HasConstraintName("FK_tblQuestions_tblQuestionEvaluation");

            entity.HasOne(d => d.Man).WithMany(p => p.TblQuestions).HasConstraintName("FK_tblQuestions_tblCAPMASMangements");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblQuestions).HasConstraintName("FK_tblQuestions_tblMainSubMenu");

            entity.HasOne(d => d.Qc).WithMany(p => p.TblQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblQuestions_tblQuestionClusters");

            entity.HasOne(d => d.Status).WithMany(p => p.TblQuestions).HasConstraintName("FK_tblQuestions_tblQuestionStatus");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblQuestions).HasConstraintName("FK_tblQuestions_tblUsers");
        });

        modelBuilder.Entity<TblQuestsionerAnswer>(entity =>
        {
            entity.Property(e => e.QaDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Qo).WithMany(p => p.TblQuestsionerAnswers).HasConstraintName("FK_tblQuestsioner_Answers_tblQuestsioner_Data");
        });

        modelBuilder.Entity<TblQuestsionerDatum>(entity =>
        {
            entity.HasOne(d => d.Qt).WithMany(p => p.TblQuestsionerData).HasConstraintName("FK_tblQuestsioner_Data_tblQuestsioner_Titles");
        });

        modelBuilder.Entity<TblQuestsionerTitle>(entity =>
        {
            entity.Property(e => e.QtCreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.QtVisable).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TblRequest>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("PK_tblJobs");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblRequestEmpCreateNavigations).HasConstraintName("FK_tblJobs_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblRequestEmpLastUpdateNavigations).HasConstraintName("FK_tblJobs_tblEmployees1");

            entity.HasOne(d => d.RequestC).WithMany(p => p.TblRequests).HasConstraintName("FK_tblJobs_tblJobCategory");
        });

        modelBuilder.Entity<TblRequestCategory>(entity =>
        {
            entity.HasKey(e => e.RequestCId).HasName("PK_tblJobCategory");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblRequestCategoryEmpCreateNavigations).HasConstraintName("FK_tblJobCategory_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblRequestCategoryEmpLastUpdateNavigations).HasConstraintName("FK_tblJobCategory_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblRequestCategories).HasConstraintName("FK_tblJobCategory_tblMainSubMenu");
        });

        modelBuilder.Entity<TblRequestFormSide>(entity =>
        {
            entity.Property(e => e.RfsCreatedDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<TblRequestFormStatistican>(entity =>
        {
            entity.Property(e => e.RfstCreatedDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<TblRequestRegisteration>(entity =>
        {
            entity.HasKey(e => e.JrId).HasName("PK_tblJobRegisteration");

            entity.HasOne(d => d.Ec).WithMany(p => p.TblRequestRegisterations).HasConstraintName("FK_tblJobRegisteration_tblEducationCategory");

            entity.HasOne(d => d.Emp).WithMany(p => p.TblRequestRegisterations).HasConstraintName("FK_tblJobRegisteration_tblEmployees");

            entity.HasOne(d => d.Request).WithMany(p => p.TblRequestRegisterations).HasConstraintName("FK_tblJobRegisteration_tblJobs");

            entity.HasOne(d => d.Rs).WithMany(p => p.TblRequestRegisterations).HasConstraintName("FK_tblRequestRegisteration_tblRequestStatus");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblRequestRegisterations).HasConstraintName("FK_tblJobRegisteration_tblUsers");
        });

        modelBuilder.Entity<TblReseachAndFormsCategory>(entity =>
        {
            entity.Property(e => e.RcVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblReseachAndFormsCategoryEmpCreateNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblReseachAndFormsCategories_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblReseachAndFormsCategoryEmpLastUpdateNavigations).HasConstraintName("FK_tblReseachAndFormsCategories_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblReseachAndFormsCategories).HasConstraintName("FK_tblReseachAndFormsCategories_MainSubMenu");
        });

        modelBuilder.Entity<TblResearchLink>(entity =>
        {
            entity.HasKey(e => e.RlId).HasName("PK_tbl_ResearchLinks");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblResearchLinkEmpCreateNavigations).HasConstraintName("FK_tblResearchLinks_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblResearchLinkEmpLastUpdateNavigations).HasConstraintName("FK_tblResearchLinks_tblEmployees1");

            entity.HasOne(d => d.Ry).WithMany(p => p.TblResearchLinks).HasConstraintName("FK_tblResearchLinks_tblReserchesAndFormsYear");
        });

        modelBuilder.Entity<TblResearchesAgreement>(entity =>
        {
            entity.Property(e => e.InternalShow).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Fo).WithMany(p => p.TblResearchesAgreements).HasConstraintName("FK_tblResearchesAgreement_tblFoundation");
        });

        modelBuilder.Entity<TblResearchsAndForm>(entity =>
        {
            entity.HasKey(e => e.RchId).HasName("PK_tbl_ResearchsAndForms");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblResearchsAndFormEmpCreateNavigations).HasConstraintName("FK_tblResearchsAndForms_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblResearchsAndFormEmpLastUpdateNavigations).HasConstraintName("FK_tblResearchsAndForms_tblEmployees1");

            entity.HasOne(d => d.Rc).WithMany(p => p.TblResearchsAndForms).HasConstraintName("FK_tbl_ResearchsAndForms_tblReseachAndFormsCategories");
        });

        modelBuilder.Entity<TblReserchesAndFormsYear>(entity =>
        {
            entity.HasKey(e => e.RyId).HasName("PK_tblReserches");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblReserchesAndFormsYearEmpCreateNavigations).HasConstraintName("FK_tblReserchesAndFormsYear_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblReserchesAndFormsYearEmpLastUpdateNavigations).HasConstraintName("FK_tblReserchesAndFormsYear_tblEmployees1");

            entity.HasOne(d => d.Rch).WithMany(p => p.TblReserchesAndFormsYears).HasConstraintName("FK_tblReserchesAndFormsYear_tblResearchsAndForms");

            entity.HasOne(d => d.Year).WithMany(p => p.TblReserchesAndFormsYears).HasConstraintName("FK_tblReserchesAndFormsYear_Years");
        });

        modelBuilder.Entity<TblSemanticGroup>(entity =>
        {
            entity.HasOne(d => d.Si).WithMany(p => p.TblSemanticGroups).HasConstraintName("FK_tblSemantic_Groups_tblSemantic_Issues");
        });

        modelBuilder.Entity<TblSemanticIssue>(entity =>
        {
            entity.HasKey(e => e.SiId).HasName("PK_Semantic_Issues");

            entity.Property(e => e.SiVisiable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblSemanticIssueMsms).HasConstraintName("FK_tblSemantic_Issues_tblMainSubMenu");

            entity.HasOne(d => d.Smsm).WithMany(p => p.TblSemanticIssueSmsms).HasConstraintName("FK_tblSemantic_Issues_tblMainSubMenu1");
        });

        modelBuilder.Entity<TblSite>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblSiteEmpCreateNavigations).HasConstraintName("FK_tblSites_tblEmployees1");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblSiteEmpLastUpdateNavigations).HasConstraintName("FK_tblSites_tblEmployees");

            entity.HasOne(d => d.Sc).WithMany(p => p.TblSites).HasConstraintName("FK_tblSites_tblSiteCategories");
        });

        modelBuilder.Entity<TblSiteCategory>(entity =>
        {
            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblSiteCategoryEmpCreateNavigations).HasConstraintName("FK_tblSiteCategories_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblSiteCategoryEmpLastUpdateNavigations).HasConstraintName("FK_tblSiteCategories_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblSiteCategories).HasConstraintName("FK_tblSiteCategories_MainSubMenu");
        });

        modelBuilder.Entity<TblSmartTvindicator>(entity =>
        {
            entity.HasOne(d => d.Img).WithMany(p => p.TblSmartTvindicators).HasConstraintName("FK_tblSmartTVIndicator_tblSmartTVImages");
        });

        modelBuilder.Entity<TblStatistcalBulltinsYear>(entity =>
        {
            entity.HasKey(e => e.SbyId).HasName("PK_StatistcsBulltins");

            entity.Property(e => e.SbyHardCopy).HasDefaultValueSql("((1))");
            entity.Property(e => e.SbyInternalShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.SbyLoginedUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.SbyShowInMain).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblStatistcalBulltinsYearEmpCreateNavigations).HasConstraintName("FK_tblStatistcalBulltinsYear_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblStatistcalBulltinsYearEmpLastUpdateNavigations).HasConstraintName("FK_tblStatistcalBulltinsYear_tblEmployees1");

            entity.HasOne(d => d.Hca).WithMany(p => p.TblStatistcalBulltinsYears).HasConstraintName("FK_tblStatistcalBulltinsYear_History_Details");

            entity.HasOne(d => d.Month).WithMany(p => p.TblStatistcalBulltinsYears).HasConstraintName("FK_tblStatistcalBulltinsYear_tblMonths");

            entity.HasOne(d => d.Sb).WithMany(p => p.TblStatistcalBulltinsYears).HasConstraintName("FK_StatistcalBulltinsYear_StatisticsBulltins");

            entity.HasOne(d => d.Year).WithMany(p => p.TblStatistcalBulltinsYears).HasConstraintName("FK_StatistcalBulltinsYear_Years");
        });

        modelBuilder.Entity<TblStatisticsBulltin>(entity =>
        {
            entity.HasKey(e => e.SbId).HasName("PK_StatisticsBulltins");

            entity.Property(e => e.SbRestricted).HasDefaultValueSql("((0))");
            entity.Property(e => e.SbVisible).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblStatisticsBulltinEmpCreateNavigations).HasConstraintName("FK_tblStatisticsBulltins_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblStatisticsBulltinEmpLastUpdateNavigations).HasConstraintName("FK_tblStatisticsBulltins_tblEmployees1");

            entity.HasOne(d => d.Man).WithMany(p => p.TblStatisticsBulltins).HasConstraintName("FK_tblStatisticsBulltins_tblCAPMASMangements");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblStatisticsBulltins).HasConstraintName("FK_tblStatisticsBulltins_tblMainSubMenu");

            entity.HasOne(d => d.PubT).WithMany(p => p.TblStatisticsBulltins).HasConstraintName("FK_tblStatisticsBulltins_tblPublicationTypes");

            entity.HasOne(d => d.Sc).WithMany(p => p.TblStatisticsBulltins).HasConstraintName("FK_tblStatisticsBulltins_tblStatistics_Categories");

            entity.HasOne(d => d.Sd).WithMany(p => p.TblStatisticsBulltins).HasConstraintName("FK_tblStatisticsBulltins_tblStatisticsDepartements");
        });

        modelBuilder.Entity<TblStatisticsBulltinsSector>(entity =>
        {
            entity.HasKey(e => e.SbsId).HasName("PK_StatisticsBulltinsSectors");

            entity.Property(e => e.SbsVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblStatisticsBulltinsSectorEmpCreateNavigations).HasConstraintName("FK_tblStatisticsBulltinsSectors_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblStatisticsBulltinsSectorEmpLastUpdateNavigations).HasConstraintName("FK_tblStatisticsBulltinsSectors_tblEmployees1");
        });

        modelBuilder.Entity<TblStatisticsBulltinsSectoreDatum>(entity =>
        {
            entity.HasKey(e => e.SbsdId).HasName("PK_StatisticsBulltinsSectoreData");

            entity.Property(e => e.SbsdVisable).HasDefaultValueSql("((1))");
            entity.Property(e => e.SbsdVisableEnglish).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblStatisticsBulltinsSectoreDatumEmpCreateNavigations).HasConstraintName("FK_tblStatisticsBulltinsSectoreData_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblStatisticsBulltinsSectoreDatumEmpLastUpdateNavigations).HasConstraintName("FK_tblStatisticsBulltinsSectoreData_tblEmployees1");

            entity.HasOne(d => d.Sbs).WithMany(p => p.TblStatisticsBulltinsSectoreData).HasConstraintName("FK_StatisticsBulltinsSectoreData_StatisticsBulltinsSectors");

            entity.HasOne(d => d.Sby).WithMany(p => p.TblStatisticsBulltinsSectoreData).HasConstraintName("FK_StatisticsBulltinsSectoreData_StatistcalBulltinsYear");
        });

        modelBuilder.Entity<TblStatisticsCategory>(entity =>
        {
            entity.Property(e => e.ScVisible).HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<TblStatisticsDepartement>(entity =>
        {
            entity.HasKey(e => e.SdId).HasName("PK_StatisticsDepartements");

            entity.Property(e => e.SdVisable).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblStatisticsDepartementEmpCreateNavigations).HasConstraintName("FK_tblStatisticsDepartements_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblStatisticsDepartementEmpLastUpdateNavigations).HasConstraintName("FK_tblStatisticsDepartements_tblEmployees1");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblStatisticsDepartements).HasConstraintName("FK_tblStatisticsDepartements_tblMainSubMenu");
        });

        modelBuilder.Entity<TblUseMessage>(entity =>
        {
            entity.HasOne(d => d.Msg).WithMany(p => p.TblUseMessages).HasConstraintName("FK_tblUseMessages_tblMessages");

            entity.HasOne(d => d.Que).WithMany(p => p.TblUseMessages).HasConstraintName("FK_tblUseMessages_tblQuestions");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblUseMessages).HasConstraintName("FK_tblUseMessages_tblUsers");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.Property(e => e.UsrActivated).HasDefaultValueSql("((0))");
            entity.Property(e => e.UsrMonthlyBullitians).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Com).WithMany(p => p.TblUsers).HasConstraintName("FK_tblUsers_tblCompanies");

            entity.HasOne(d => d.Country).WithMany(p => p.TblUsers).HasConstraintName("FK_tblUsers_Countries");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblUserEmpCreateNavigations).HasConstraintName("FK_tblUsers_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblUserEmpLastUpdateNavigations).HasConstraintName("FK_tblUsers_tblEmployees1");

            entity.HasOne(d => d.UsrGrp).WithMany(p => p.TblUserUsrGrps)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblUsers_tblUserGroups");

            entity.HasOne(d => d.UsrRegisterdGroupNavigation).WithMany(p => p.TblUserUsrRegisterdGroupNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblUsers_tblUserGroups1");

            entity.HasOne(d => d.Ut).WithMany(p => p.TblUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblUsers_tblUserTypes");
        });

        modelBuilder.Entity<TblUserFav>(entity =>
        {
            entity.Property(e => e.UsrFavIsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.UsrFavIsShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.UsrFavIsStar).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Msm).WithMany(p => p.TblUserFavs).HasConstraintName("FK_tblUserFav_tblMainSubMenu");

            entity.HasOne(d => d.Rch).WithMany(p => p.TblUserFavs).HasConstraintName("FK_tblUserFav_tblResearchsAndForms");

            entity.HasOne(d => d.Sb).WithMany(p => p.TblUserFavs).HasConstraintName("FK_tblUserFav_tblStatisticsBulltins");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblUserFavs)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tblUserFav_tblUsers");
        });

        modelBuilder.Entity<TblUserGroup>(entity =>
        {
            entity.HasKey(e => e.UsrGrpId).HasName("PK_UserGroups");

            entity.Property(e => e.UsrGrpPaid).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblUserGroupEmpCreateNavigations).HasConstraintName("FK_tblUserGroups_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblUserGroupEmpLastUpdateNavigations).HasConstraintName("FK_tblUserGroups_tblEmployees1");
        });

        modelBuilder.Entity<TblUsersAnswer>(entity =>
        {
            entity.Property(e => e.UaCreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UaIsVisible).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Dt).WithMany(p => p.TblUsersAnswers).HasConstraintName("FK_tblUsersAnswers_bltDisscutionTopic");

            entity.HasOne(d => d.Emp).WithMany(p => p.TblUsersAnswers).HasConstraintName("FK_tblUsersAnswers_tblEmployees");

            entity.HasOne(d => d.Usr).WithMany(p => p.TblUsersAnswers).HasConstraintName("FK_tblUsersAnswers_tblUsers");
        });

        modelBuilder.Entity<TblUsersGroupsBulltin>(entity =>
        {
            entity.HasKey(e => e.UgbId).HasName("PK_tblUsersGroups_Bullitians");

            entity.HasOne(d => d.EmpCreateNavigation).WithMany(p => p.TblUsersGroupsBulltinEmpCreateNavigations).HasConstraintName("FK_tblUsersGroups_Bulltins_tblEmployees");

            entity.HasOne(d => d.EmpLastUpdateNavigation).WithMany(p => p.TblUsersGroupsBulltinEmpLastUpdateNavigations).HasConstraintName("FK_tblUsersGroups_Bulltins_tblEmployees1");

            entity.HasOne(d => d.Sb).WithMany(p => p.TblUsersGroupsBulltins).HasConstraintName("FK_tblUsersGroups_Bulltins_StatisticsBulltins");

            entity.HasOne(d => d.UsrGrp).WithMany(p => p.TblUsersGroupsBulltins).HasConstraintName("FK_tblUsersGroups_Bullitians_tblUserGroups");
        });

        modelBuilder.Entity<TblVisitHistory>(entity =>
        {
            entity.HasOne(d => d.User).WithMany(p => p.TblVisitHistories).HasConstraintName("FK_tblVisit_History_tblVisit_History");
        });

        modelBuilder.Entity<TblVisitsLog>(entity =>
        {
            entity.Property(e => e.EnglishPage).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TblYear>(entity =>
        {
            entity.HasKey(e => e.YearId).HasName("PK_Years");

            entity.Property(e => e.YearName).IsFixedLength();
        });

        modelBuilder.Entity<TblYearsNew>(entity =>
        {
            entity.Property(e => e.YearName).IsFixedLength();
        });

        modelBuilder.Entity<TradeEximFay>(entity =>
        {
            entity.Property(e => e.Country).IsFixedLength();
            entity.Property(e => e.Item).IsFixedLength();
            entity.Property(e => e.NExpIp).IsFixedLength();
            entity.Property(e => e.TypeTr).IsFixedLength();
        });

        modelBuilder.Entity<TradeForBalance>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_BALANCE_TRADE_FOR_FDOLLER");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_BALANCE_TRADE_FOR_COUNTRY");
        });

        modelBuilder.Entity<TradeForBalancenew>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_BALANCENew_TRADE_FOR_FDOLLERNew");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_BALANCENew_TRADE_FOR_COUNTRYNew");
        });

        modelBuilder.Entity<TradeForChaptersnew>(entity =>
        {
            entity.Property(e => e.ChaptersId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForCountrynew>(entity =>
        {
            entity.Property(e => e.CountryId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForExpRowdatanew>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_FDOLLERNew");

            entity.HasOne(d => d.TradeForChapters).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_CHAPTERSNew");

            entity.HasOne(d => d.TradeForChaptersNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_SUB_CHAPTERSNew");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_COUNTRYNew");

            entity.HasOne(d => d.TradeForHsn).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_HSNNew");

            entity.HasOne(d => d.TradeForManufacture).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_MANUFACTURENew");

            entity.HasOne(d => d.TradeForPorts).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_PORTSNew");

            entity.HasOne(d => d.TradeForUnits).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATANew_TRADE_FOR_UNITSNew");
        });

        modelBuilder.Entity<TradeForExpRowdatum>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_FDOLLER");

            entity.HasOne(d => d.TradeForChapters).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_CHAPTERS");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_COUNTRY");

            entity.HasOne(d => d.TradeForHsn).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_HSN");

            entity.HasOne(d => d.TradeForManufacture).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_MANUFACTURE");

            entity.HasOne(d => d.TradeForPorts).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_PORTS");

            entity.HasOne(d => d.TradeForSubChapters).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_SUB_CHAPTERS");

            entity.HasOne(d => d.TradeForUnits).WithMany().HasConstraintName("FK_TRADE_FOR_EXP_ROWDATA_TRADE_FOR_UNITS");
        });

        modelBuilder.Entity<TradeForFdollernew>(entity =>
        {
            entity.Property(e => e.Dat).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForHsn>(entity =>
        {
            entity.HasOne(d => d.ManufactureExport).WithMany(p => p.TradeForHsnManufactureExports).HasConstraintName("FK_TRADE_FOR_HSN_TRADE_FOR_MANUFACTURE");

            entity.HasOne(d => d.ManufactureImport).WithMany(p => p.TradeForHsnManufactureImports).HasConstraintName("FK_TRADE_FOR_HSN_TRADE_FOR_MANUFACTURE1");

            entity.HasOne(d => d.SubChapters).WithMany(p => p.TradeForHsns).HasConstraintName("FK_TRADE_FOR_HSN_TRADE_FOR_SUB_CHAPTERS");

            entity.HasOne(d => d.Units).WithMany(p => p.TradeForHsns).HasConstraintName("FK_TRADE_FOR_HSN_TRADE_FOR_UNITS");
        });

        modelBuilder.Entity<TradeForHsnnew>(entity =>
        {
            entity.Property(e => e.HsnId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForImpRowdatanew>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_FDOLLERNew");

            entity.HasOne(d => d.TradeForChapters).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_CHAPTERSNew");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_COUNTRYNew");

            entity.HasOne(d => d.TradeForHsn).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_HSNNew");

            entity.HasOne(d => d.TradeForManufacture).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_MANUFACTURENew");

            entity.HasOne(d => d.TradeForPorts).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_PORTSNew");

            entity.HasOne(d => d.TradeForSubChapters).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_SUB_CHAPTERSNew");

            entity.HasOne(d => d.TradeForUnits).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATANew_TRADE_FOR_UNITSNew");
        });

        modelBuilder.Entity<TradeForImpRowdatum>(entity =>
        {
            entity.HasOne(d => d.DatNavigation).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_FDOLLER");

            entity.HasOne(d => d.TradeForChapters).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_CHAPTERS");

            entity.HasOne(d => d.TradeForCountry).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_COUNTRY");

            entity.HasOne(d => d.TradeForHsn).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_HSN");

            entity.HasOne(d => d.TradeForManufacture).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_MANUFACTURE");

            entity.HasOne(d => d.TradeForPorts).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_PORTS");

            entity.HasOne(d => d.TradeForSubChapters).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_SUB_CHAPTERS");

            entity.HasOne(d => d.TradeForUnits).WithMany().HasConstraintName("FK_TRADE_FOR_IMP_ROWDATA_TRADE_FOR_UNITS");
        });

        modelBuilder.Entity<TradeForManufacturenew>(entity =>
        {
            entity.Property(e => e.ManufactureId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForPortsnew>(entity =>
        {
            entity.Property(e => e.PortsId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForSubChaptersnew>(entity =>
        {
            entity.Property(e => e.SubChaptersId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeForUnitsnew>(entity =>
        {
            entity.Property(e => e.UnitsId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TradeNameimex2008>(entity =>
        {
            entity.Property(e => e.Code).IsFixedLength();
        });

        modelBuilder.Entity<TranslateTblIndicatorDatum>(entity =>
        {
            entity.Property(e => e.IndDataChartType).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}